#!/usr/bin/perl

sub area {
	my @t = @_;
	my $n = $#t + 1;
	my $area = 0;
	for (my $i = 0; $i < $n; $i++) {
		$area += $x[$t[$i]] * $y[$t[($i + 1 + $n) % $n]];
		$area -= $y[$t[$i]] * $x[$t[($i + 1 + $n) % $n]];
	}
	$area /= 2;
	return $area;
}

while (<>) {
	chomp;
	($l1, $p1, $l2, $p2, $l3, $p3) = split(/ /);
	($y[$l1], $x[$l1]) = split(/,/, $p1);
	($y[$l2], $x[$l2]) = split(/,/, $p2);
	($y[$l3], $x[$l3]) = split(/,/, $p3);

	$neighbor{$l1}{$l2} = 1;
	$neighbor{$l1}{$l3} = 1;
	$neighbor{$l2}{$l1} = 1;
	$neighbor{$l2}{$l3} = 1;
	$neighbor{$l3}{$l1} = 1;
	$neighbor{$l3}{$l1} = 1;

	@t = ( $l1, $l2, $l3 );
	push @tris, [@t];

	push @{$triangles_of{$l1}}, $#tris;
	push @{$triangles_of{$l2}}, $#tris;
	push @{$triangles_of{$l3}}, $#tris;
}

# http://stackoverflow.com/questions/563198/how-do-you-detect-where-two-line-segments-intersect
sub intersect {
        my ($p0_x, $p0_y, $p1_x, $p1_y, $p2_x, $p2_y, $p3_x, $p3_y) = @_;

        my ($s1_x, $s1_y, $s2_x, $s2_y);
        $s1_x = $p1_x - $p0_x;     $s1_y = $p1_y - $p0_y;
        $s2_x = $p3_x - $p2_x;     $s2_y = $p3_y - $p2_y;

        my ($s, $t);

        my $div = (-$s2_x * $s1_y + $s1_x * $s2_y);
        if ($div != 0) {
                $s = (-$s1_y * ($p0_x - $p2_x) + $s1_x * ($p0_y - $p2_y)) / $div;
        } else {
                return ();
        }

        $div = (-$s2_x * $s1_y + $s1_x * $s2_y);
        if ($div != 0) {
                $t = ( $s2_x * ($p0_y - $p2_y) - $s2_y * ($p0_x - $p2_x)) / $div;
        } else {
                return ();
        }

        if ($s > 0 && $s < .999 && $t > 0 && $t < .999) {
                return ($p0_x + ($t * $s1_x), $p0_y + ($t * $s1_y), $s, $t);
        }

	return ();
}

for ($outer = 0; 1 || $outer < 500; $outer++) {
	$xmax = $ymax = -999999;
	$xmin = $ymin = 999999;
	for ($i = 0; $i <= $#x; $i++) {
		next unless defined($x[$i]);

		if ($x[$i] > $xmax) { $xmax = $x[$i]; }
		if ($y[$i] > $ymax) { $ymax = $y[$i]; }
		if ($x[$i] < $xmin) { $xmin = $x[$i]; }
		if ($y[$i] < $ymin) { $ymin = $y[$i]; }
	}
	if ($xmax - $xmin > $ymax - $ymin) {
		$scale = $xmax - $xmin;
	} else {
		$scale = $ymax - $ymin;
	}

	if (1) {
		$minarea = 99999999;
		$maxarea = 0;

		for ($i = 0; $i < $#tris; $i++) {
			$area = area(@{$tris[$i]});
			if ($area > $maxarea) { $maxarea = $area; }
			if ($area < $minarea) { $minarea = $area; }
		}

		printf STDERR ("%d: %.6f\n", $outer, $maxarea / $minarea);
	}

	if ($outer % 5 == 0) {
		print STDERR "$outer  \r";
		print "0 setlinewidth\n";
		for ($i = 0; $i <= $#x; $i++) {
			next unless defined($x[$i]);

			for $k (keys (%{$neighbor{$i}})) {
				printf("%.6f %.6f moveto %.6f %.6f lineto stroke\n",
					($x[$i] - $xmin) * 612 / $scale,
					($y[$i] - $ymin) * 612 / $scale,
					($x[$k] - $xmin) * 612 / $scale,
					($y[$k] - $ymin) * 612 / $scale);
			}
		}
		print "showpage\n";
	}

	if (0) {
		for ($i = 0; $i <= $#tris; $i++) {
			@t = @{$tris[$i]};

			$xc = 0;
			$yc = 0;
			$count = 0;
			for ($j = 0; $j <= $#t; $j++) {
				$xc += $x[$t[$j]];
				$yc += $y[$t[$j]];
				$count++;
			}
			$xc /= $count;
			$yc /= $count;

			$big = -1;
			$bigdist = 0;
			for ($j = 0; $j <= $#t; $j++) {
				$xd = $x[$t[$j]] - $xc;
				$yd = $y[$t[$j]] - $yc;
				$dist[$j] = sqrt($xd * $xd + $yd * $yd);

				if ($dist[$j] > $bigdist) {
					$bigdist = $dist[$j];
					$big = $j;
				}

				# print "$i: $j: $x[$t[$j]],$y[$t[$j]] from $xc,$yc: $dist[$j]\n";
			}

			$x[$t[$big]] = $xc;
			$y[$t[$big]] = $yc;
		}
	}

	if (1) {
		for ($i = 0; $i <= $#x; $i++) {
			next unless defined($x[$i]);

			@n = keys (%{$neighbor{$i}});
			$herecount = $#n + 1;

			next if $herecount == 0;

			$xsum = 0;
			$ysum = 0;
			$count = 0;

			for $k (keys (%{$neighbor{$i}})) {
				if (1) {
					$dmin = 9999999;
					for $k2 (keys (%{$neighbor{$k}})) {
						$xd = $x[$k] - $x[$k2];
						$yd = $y[$k] - $y[$k2];
						$d = sqrt($xd * $xd + $yd * $yd);
						if ($d < $dmin) {
							$dmin = $d;
						}
					}

					$xsum += $x[$k] * $dmin;
					$ysum += $y[$k] * $dmin;
					$count += 1 * $dmin;
				} else {
					@n = keys (%{$neighbor{$k}});
					$therecount = $#n + 1;

					$weight = $herecount / $therecount;
					$xsum += $x[$k] * $weight;
					$ysum += $y[$k] * $weight;
					$count += $weight;
				}
			}

			# print "$i: $x[$i],$y[$i] has $count ";

			$wasx = $x[$i];
			$wasy = $y[$i];

			$x[$i] = $xsum / $count;
			$y[$i] = $ysum / $count;

			$again = 1;
			while ($again) {
				$again = 0;

				my @t = @{$triangles_of{$i}};
				# print "at $i: could be affected: @t\n";
				for my $t (@t) {
					my $area = area(@{$tris[$t]});
					# print "$t: area $area\n";
					if ($area <= 0) {
						# print STDERR "$i: $t: area $area\n";
						
						$x[$i] = ($wasx + $x[$i]) / 2;
						$y[$i] = ($wasy + $y[$i]) / 2;
						$again = 1;
						last;
					}
				}

			}

			# print "to $x[$i],$y[$i]\n";
		}
	}
}
